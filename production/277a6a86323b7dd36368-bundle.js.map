{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/markdown/lib/index.js","webpack:///./js/markdownPreviewer.js","webpack:///./js/index.js","webpack:///./node_modules/inherits/inherits_browser.js","webpack:///./node_modules/util/support/isBufferBrowser.js","webpack:///./node_modules/process/browser.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/util/util.js","webpack:///./node_modules/markdown/lib/markdown.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","markdown","parse","toHTML","markdownPreviewer","$document","sourceId","previewId","event","text","getElementById","innerHTML","lib","preventDefault","window","onload","document","addEventListener","ctor","superCtor","super_","constructor","writable","configurable","TempCtor","arg","copy","fill","readUInt8","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","arguments","push","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","g","Function","eval","global","formatRegExp","format","f","isString","objects","inspect","join","str","String","replace","x","Number","JSON","stringify","_","isNull","isObject","deprecate","fn","msg","isUndefined","noDeprecation","warned","throwDeprecation","traceDeprecation","console","trace","error","debugEnviron","debugs","obj","opts","ctx","seen","stylize","stylizeNoColor","depth","colors","isBoolean","showHidden","_extend","customInspect","stylizeWithColor","formatValue","styleType","style","styles","recurseTimes","isFunction","ret","primitive","simple","isNumber","formatPrimitive","keys","visibleKeys","hash","forEach","val","idx","arrayToHash","getOwnPropertyNames","isError","indexOf","formatError","isRegExp","RegExp","toString","isDate","Date","output","base","braces","isArray","toUTCString","formatProperty","match","formatArray","map","pop","reduce","prev","cur","numLinesEst","reduceToSingleString","desc","getOwnPropertyDescriptor","set","split","line","substr","ar","re","objectToString","pad","debuglog","NODE_DEBUG","toUpperCase","test","pid","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","undefined","null","string","date","regexp","isNullOrUndefined","isSymbol","isPrimitive","isBuffer","months","prop","log","time","getHours","getMinutes","getSeconds","getDate","getMonth","timestamp","inherits","origin","add","expose","Markdown","dialect","dialects","Gruber","em_state","strong_state","debug_indent","mk_block_toSource","uneval","trailing","lineNumber","mk_block_inspect","util","source","toTree","options","input","toHTMLTree","renderJsonML","attrs","extract_attr","refs","references","html","convert_tree_to_html","tree","jsonml","slice","preprocessTreeNode","level","code","splice","src","href","ref","original","merge_text_nodes","mk_block","block","trail","toSource","count_lines","strong_em","tag","md","state_slot","other_slot","CloseTag","len_after","orig_match","shift","other","state","unshift","res","processInline","last","split_blocks","startLine","blocks","line_no","exec","lastIndex","processBlock","next","cbs","ord","__order__","__call__","debug","inline","custom_root","old_tree","b","print","loop_re_over_block","cb","valueOf","atxHeader","header","setextHeader","block_search","substring","horizRule","lists","any_list","bullet_list","is_list_re","indent_re","regex_for_depth","expand_tab","li","loose","nl","add_to","what","get_contained_blocks","paragraphify","stack","list","last_li","sublist","make_list","lines","li_accumulate","line_re","wanted_depth","Math","floor","found","indent","contained","next_block","hr","blockquote","abutting","processedBlock","attr","isEmpty","referenceDefn","toLowerCase","para","__oneElement__","patterns_or_re","previous_nodes","__patterns__","index","patterns","out","]","}","__escape__","\\","charAt","![","alt","[","orig","DialectHelpers","inline_until_char","link","consumed","children","url","open_parens","<","`","  \n","buildBlockOrder","buildInlinePatterns","pattern","want","nodes","subclassDialect","Block","Inline","Maruku","processMetaHash","meta_string","meta","parts","in_quotes","letter","split_meta_hash","id","document_meta","pairs","block_meta","node","a","result","definition_list","tight","terms","defns","table","_split_on_unescaped","ch","html_attrs","align","trim","row","html_row","matches","before","k","arr","thisp","escapeHTML","render_tree","attributes","content","tag_attrs","root"],"mappings":"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","file":"277a6a86323b7dd36368-bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","// super simple module for the most common nodejs use case.\nexports.markdown = require(\"./markdown\");\nexports.parse = exports.markdown.toHTML;\n","import { markdown } from \"markdown\";\n\nvar attachPreviewer = function($document, sourceId, previewId) {\n  return function(event) {\n    var text    = $document.getElementById(sourceId).value,\n        preview = $document.getElementById(previewId);\n    preview.innerHTML = markdown.toHTML(text);\n    event.preventDefault();\n    throw \"aaaaaaa\";\n  }\n}\n\nexport default {\n  attachPreviewer: attachPreviewer\n}","import \"tachyons\";\nimport \"../css/styles.css\";\nimport markdownPreviewer from \"./markdownPreviewer\"\n\nwindow.onload = function() {\n  document.getElementById(\"editor\").addEventListener(\n    \"submit\",\n    markdownPreviewer.attachPreviewer(\n      document, // pass in document\n      \"source\", // id of source textarea\n      \"preview\" // id of preview DOM delement\n    )\n  );\n};","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","// Released under MIT license\n// Copyright (c) 2009-2010 Dominic Baggott\n// Copyright (c) 2009-2010 Ash Berlin\n// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)\n\n/*jshint browser:true, devel:true */\n\n(function( expose ) {\n\n/**\n *  class Markdown\n *\n *  Markdown processing in Javascript done right. We have very particular views\n *  on what constitutes 'right' which include:\n *\n *  - produces well-formed HTML (this means that em and strong nesting is\n *    important)\n *\n *  - has an intermediate representation to allow processing of parsed data (We\n *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).\n *\n *  - is easily extensible to add new dialects without having to rewrite the\n *    entire parsing mechanics\n *\n *  - has a good test suite\n *\n *  This implementation fulfills all of these (except that the test suite could\n *  do with expanding to automatically run all the fixtures from other Markdown\n *  implementations.)\n *\n *  ##### Intermediate Representation\n *\n *  *TODO* Talk about this :) Its JsonML, but document the node names we use.\n *\n *  [JsonML]: http://jsonml.org/ \"JSON Markup Language\"\n **/\nvar Markdown = expose.Markdown = function(dialect) {\n  switch (typeof dialect) {\n    case \"undefined\":\n      this.dialect = Markdown.dialects.Gruber;\n      break;\n    case \"object\":\n      this.dialect = dialect;\n      break;\n    default:\n      if ( dialect in Markdown.dialects ) {\n        this.dialect = Markdown.dialects[dialect];\n      }\n      else {\n        throw new Error(\"Unknown Markdown dialect '\" + String(dialect) + \"'\");\n      }\n      break;\n  }\n  this.em_state = [];\n  this.strong_state = [];\n  this.debug_indent = \"\";\n};\n\n/**\n *  parse( markdown, [dialect] ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *\n *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.\n **/\nexpose.parse = function( source, dialect ) {\n  // dialect will default if undefined\n  var md = new Markdown( dialect );\n  return md.toTree( source );\n};\n\n/**\n *  toHTML( markdown, [dialect]  ) -> String\n *  toHTML( md_tree ) -> String\n *  - markdown (String): markdown string to parse\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Take markdown (either as a string or as a JsonML tree) and run it through\n *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.\n **/\nexpose.toHTML = function toHTML( source , dialect , options ) {\n  var input = expose.toHTMLTree( source , dialect , options );\n\n  return expose.renderJsonML( input );\n};\n\n/**\n *  toHTMLTree( markdown, [dialect] ) -> JsonML\n *  toHTMLTree( md_tree ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Turn markdown into HTML, represented as a JsonML tree. If a string is given\n *  to this function, it is first parsed into a markdown tree by calling\n *  [[parse]].\n **/\nexpose.toHTMLTree = function toHTMLTree( input, dialect , options ) {\n  // convert string input to an MD tree\n  if ( typeof input ===\"string\" ) input = this.parse( input, dialect );\n\n  // Now convert the MD tree to an HTML tree\n\n  // remove references from the tree\n  var attrs = extract_attr( input ),\n      refs = {};\n\n  if ( attrs && attrs.references ) {\n    refs = attrs.references;\n  }\n\n  var html = convert_tree_to_html( input, refs , options );\n  merge_text_nodes( html );\n  return html;\n};\n\n// For Spidermonkey based engines\nfunction mk_block_toSource() {\n  return \"Markdown.mk_block( \" +\n          uneval(this.toString()) +\n          \", \" +\n          uneval(this.trailing) +\n          \", \" +\n          uneval(this.lineNumber) +\n          \" )\";\n}\n\n// node\nfunction mk_block_inspect() {\n  var util = require(\"util\");\n  return \"Markdown.mk_block( \" +\n          util.inspect(this.toString()) +\n          \", \" +\n          util.inspect(this.trailing) +\n          \", \" +\n          util.inspect(this.lineNumber) +\n          \" )\";\n\n}\n\nvar mk_block = Markdown.mk_block = function(block, trail, line) {\n  // Be helpful for default case in tests.\n  if ( arguments.length == 1 ) trail = \"\\n\\n\";\n\n  var s = new String(block);\n  s.trailing = trail;\n  // To make it clear its not just a string\n  s.inspect = mk_block_inspect;\n  s.toSource = mk_block_toSource;\n\n  if ( line != undefined )\n    s.lineNumber = line;\n\n  return s;\n};\n\nfunction count_lines( str ) {\n  var n = 0, i = -1;\n  while ( ( i = str.indexOf(\"\\n\", i + 1) ) !== -1 ) n++;\n  return n;\n}\n\n// Internal - split source into rough blocks\nMarkdown.prototype.split_blocks = function splitBlocks( input, startLine ) {\n  input = input.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\");\n  // [\\s\\S] matches _anything_ (newline or space)\n  // [^] is equivalent but doesn't work in IEs.\n  var re = /([\\s\\S]+?)($|\\n#|\\n(?:\\s*\\n|$)+)/g,\n      blocks = [],\n      m;\n\n  var line_no = 1;\n\n  if ( ( m = /^(\\s*\\n)/.exec(input) ) != null ) {\n    // skip (but count) leading blank lines\n    line_no += count_lines( m[0] );\n    re.lastIndex = m[0].length;\n  }\n\n  while ( ( m = re.exec(input) ) !== null ) {\n    if (m[2] == \"\\n#\") {\n      m[2] = \"\\n\";\n      re.lastIndex--;\n    }\n    blocks.push( mk_block( m[1], m[2], line_no ) );\n    line_no += count_lines( m[0] );\n  }\n\n  return blocks;\n};\n\n/**\n *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]\n *  - block (String): the block to process\n *  - next (Array): the following blocks\n *\n * Process `block` and return an array of JsonML nodes representing `block`.\n *\n * It does this by asking each block level function in the dialect to process\n * the block until one can. Succesful handling is indicated by returning an\n * array (with zero or more JsonML nodes), failure by a false value.\n *\n * Blocks handlers are responsible for calling [[Markdown#processInline]]\n * themselves as appropriate.\n *\n * If the blocks were split incorrectly or adjacent blocks need collapsing you\n * can adjust `next` in place using shift/splice etc.\n *\n * If any of this default behaviour is not right for the dialect, you can\n * define a `__call__` method on the dialect that will get invoked to handle\n * the block processing.\n */\nMarkdown.prototype.processBlock = function processBlock( block, next ) {\n  var cbs = this.dialect.block,\n      ord = cbs.__order__;\n\n  if ( \"__call__\" in cbs ) {\n    return cbs.__call__.call(this, block, next);\n  }\n\n  for ( var i = 0; i < ord.length; i++ ) {\n    //D:this.debug( \"Testing\", ord[i] );\n    var res = cbs[ ord[i] ].call( this, block, next );\n    if ( res ) {\n      //D:this.debug(\"  matched\");\n      if ( !isArray(res) || ( res.length > 0 && !( isArray(res[0]) ) ) )\n        this.debug(ord[i], \"didn't return a proper array\");\n      //D:this.debug( \"\" );\n      return res;\n    }\n  }\n\n  // Uhoh! no match! Should we throw an error?\n  return [];\n};\n\nMarkdown.prototype.processInline = function processInline( block ) {\n  return this.dialect.inline.__call__.call( this, String( block ) );\n};\n\n/**\n *  Markdown#toTree( source ) -> JsonML\n *  - source (String): markdown source to parse\n *\n *  Parse `source` into a JsonML tree representing the markdown document.\n **/\n// custom_tree means set this.tree to `custom_tree` and restore old value on return\nMarkdown.prototype.toTree = function toTree( source, custom_root ) {\n  var blocks = source instanceof Array ? source : this.split_blocks( source );\n\n  // Make tree a member variable so its easier to mess with in extensions\n  var old_tree = this.tree;\n  try {\n    this.tree = custom_root || this.tree || [ \"markdown\" ];\n\n    blocks:\n    while ( blocks.length ) {\n      var b = this.processBlock( blocks.shift(), blocks );\n\n      // Reference blocks and the like won't return any content\n      if ( !b.length ) continue blocks;\n\n      this.tree.push.apply( this.tree, b );\n    }\n    return this.tree;\n  }\n  finally {\n    if ( custom_root ) {\n      this.tree = old_tree;\n    }\n  }\n};\n\n// Noop by default\nMarkdown.prototype.debug = function () {\n  var args = Array.prototype.slice.call( arguments);\n  args.unshift(this.debug_indent);\n  if ( typeof print !== \"undefined\" )\n      print.apply( print, args );\n  if ( typeof console !== \"undefined\" && typeof console.log !== \"undefined\" )\n      console.log.apply( null, args );\n}\n\nMarkdown.prototype.loop_re_over_block = function( re, block, cb ) {\n  // Dont use /g regexps with this\n  var m,\n      b = block.valueOf();\n\n  while ( b.length && (m = re.exec(b) ) != null ) {\n    b = b.substr( m[0].length );\n    cb.call(this, m);\n  }\n  return b;\n};\n\n/**\n * Markdown.dialects\n *\n * Namespace of built-in dialects.\n **/\nMarkdown.dialects = {};\n\n/**\n * Markdown.dialects.Gruber\n *\n * The default dialect that follows the rules set out by John Gruber's\n * markdown.pl as closely as possible. Well actually we follow the behaviour of\n * that script which in some places is not exactly what the syntax web page\n * says.\n **/\nMarkdown.dialects.Gruber = {\n  block: {\n    atxHeader: function atxHeader( block, next ) {\n      var m = block.match( /^(#{1,6})\\s*(.*?)\\s*#*\\s*(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var header = [ \"header\", { level: m[ 1 ].length } ];\n      Array.prototype.push.apply(header, this.processInline(m[ 2 ]));\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    setextHeader: function setextHeader( block, next ) {\n      var m = block.match( /^(.*)\\n([-=])\\2\\2+(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var level = ( m[ 2 ] === \"=\" ) ? 1 : 2;\n      var header = [ \"header\", { level : level }, m[ 1 ] ];\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    code: function code( block, next ) {\n      // |    Foo\n      // |bar\n      // should be a code block followed by a paragraph. Fun\n      //\n      // There might also be adjacent code block to merge.\n\n      var ret = [],\n          re = /^(?: {0,3}\\t| {4})(.*)\\n?/,\n          lines;\n\n      // 4 spaces + content\n      if ( !block.match( re ) ) return undefined;\n\n      block_search:\n      do {\n        // Now pull out the rest of the lines\n        var b = this.loop_re_over_block(\n                  re, block.valueOf(), function( m ) { ret.push( m[1] ); } );\n\n        if ( b.length ) {\n          // Case alluded to in first comment. push it back on as a new block\n          next.unshift( mk_block(b, block.trailing) );\n          break block_search;\n        }\n        else if ( next.length ) {\n          // Check the next block - it might be code too\n          if ( !next[0].match( re ) ) break block_search;\n\n          // Pull how how many blanks lines follow - minus two to account for .join\n          ret.push ( block.trailing.replace(/[^\\n]/g, \"\").substring(2) );\n\n          block = next.shift();\n        }\n        else {\n          break block_search;\n        }\n      } while ( true );\n\n      return [ [ \"code_block\", ret.join(\"\\n\") ] ];\n    },\n\n    horizRule: function horizRule( block, next ) {\n      // this needs to find any hr in the block to handle abutting blocks\n      var m = block.match( /^(?:([\\s\\S]*?)\\n)?[ \\t]*([-_*])(?:[ \\t]*\\2){2,}[ \\t]*(?:\\n([\\s\\S]*))?$/ );\n\n      if ( !m ) {\n        return undefined;\n      }\n\n      var jsonml = [ [ \"hr\" ] ];\n\n      // if there's a leading abutting block, process it\n      if ( m[ 1 ] ) {\n        jsonml.unshift.apply( jsonml, this.processBlock( m[ 1 ], [] ) );\n      }\n\n      // if there's a trailing abutting block, stick it into next\n      if ( m[ 3 ] ) {\n        next.unshift( mk_block( m[ 3 ] ) );\n      }\n\n      return jsonml;\n    },\n\n    // There are two types of lists. Tight and loose. Tight lists have no whitespace\n    // between the items (and result in text just in the <li>) and loose lists,\n    // which have an empty line between list items, resulting in (one or more)\n    // paragraphs inside the <li>.\n    //\n    // There are all sorts weird edge cases about the original markdown.pl's\n    // handling of lists:\n    //\n    // * Nested lists are supposed to be indented by four chars per level. But\n    //   if they aren't, you can get a nested list by indenting by less than\n    //   four so long as the indent doesn't match an indent of an existing list\n    //   item in the 'nest stack'.\n    //\n    // * The type of the list (bullet or number) is controlled just by the\n    //    first item at the indent. Subsequent changes are ignored unless they\n    //    are for nested lists\n    //\n    lists: (function( ) {\n      // Use a closure to hide a few variables.\n      var any_list = \"[*+-]|\\\\d+\\\\.\",\n          bullet_list = /[*+-]/,\n          number_list = /\\d+\\./,\n          // Capture leading indent as it matters for determining nested lists.\n          is_list_re = new RegExp( \"^( {0,3})(\" + any_list + \")[ \\t]+\" ),\n          indent_re = \"(?: {0,3}\\\\t| {4})\";\n\n      // TODO: Cache this regexp for certain depths.\n      // Create a regexp suitable for matching an li for a given stack depth\n      function regex_for_depth( depth ) {\n\n        return new RegExp(\n          // m[1] = indent, m[2] = list_type\n          \"(?:^(\" + indent_re + \"{0,\" + depth + \"} {0,3})(\" + any_list + \")\\\\s+)|\" +\n          // m[3] = cont\n          \"(^\" + indent_re + \"{0,\" + (depth-1) + \"}[ ]{0,4})\"\n        );\n      }\n      function expand_tab( input ) {\n        return input.replace( / {0,3}\\t/g, \"    \" );\n      }\n\n      // Add inline content `inline` to `li`. inline comes from processInline\n      // so is an array of content\n      function add(li, loose, inline, nl) {\n        if ( loose ) {\n          li.push( [ \"para\" ].concat(inline) );\n          return;\n        }\n        // Hmmm, should this be any block level element or just paras?\n        var add_to = li[li.length -1] instanceof Array && li[li.length - 1][0] == \"para\"\n                   ? li[li.length -1]\n                   : li;\n\n        // If there is already some content in this list, add the new line in\n        if ( nl && li.length > 1 ) inline.unshift(nl);\n\n        for ( var i = 0; i < inline.length; i++ ) {\n          var what = inline[i],\n              is_str = typeof what == \"string\";\n          if ( is_str && add_to.length > 1 && typeof add_to[add_to.length-1] == \"string\" ) {\n            add_to[ add_to.length-1 ] += what;\n          }\n          else {\n            add_to.push( what );\n          }\n        }\n      }\n\n      // contained means have an indent greater than the current one. On\n      // *every* line in the block\n      function get_contained_blocks( depth, blocks ) {\n\n        var re = new RegExp( \"^(\" + indent_re + \"{\" + depth + \"}.*?\\\\n?)*$\" ),\n            replace = new RegExp(\"^\" + indent_re + \"{\" + depth + \"}\", \"gm\"),\n            ret = [];\n\n        while ( blocks.length > 0 ) {\n          if ( re.exec( blocks[0] ) ) {\n            var b = blocks.shift(),\n                // Now remove that indent\n                x = b.replace( replace, \"\");\n\n            ret.push( mk_block( x, b.trailing, b.lineNumber ) );\n          }\n          else {\n            break;\n          }\n        }\n        return ret;\n      }\n\n      // passed to stack.forEach to turn list items up the stack into paras\n      function paragraphify(s, i, stack) {\n        var list = s.list;\n        var last_li = list[list.length-1];\n\n        if ( last_li[1] instanceof Array && last_li[1][0] == \"para\" ) {\n          return;\n        }\n        if ( i + 1 == stack.length ) {\n          // Last stack frame\n          // Keep the same array, but replace the contents\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ) );\n        }\n        else {\n          var sublist = last_li.pop();\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ), sublist );\n        }\n      }\n\n      // The matcher function\n      return function( block, next ) {\n        var m = block.match( is_list_re );\n        if ( !m ) return undefined;\n\n        function make_list( m ) {\n          var list = bullet_list.exec( m[2] )\n                   ? [\"bulletlist\"]\n                   : [\"numberlist\"];\n\n          stack.push( { list: list, indent: m[1] } );\n          return list;\n        }\n\n\n        var stack = [], // Stack of lists for nesting.\n            list = make_list( m ),\n            last_li,\n            loose = false,\n            ret = [ stack[0].list ],\n            i;\n\n        // Loop to search over block looking for inner block elements and loose lists\n        loose_search:\n        while ( true ) {\n          // Split into lines preserving new lines at end of line\n          var lines = block.split( /(?=\\n)/ );\n\n          // We have to grab all lines for a li and call processInline on them\n          // once as there are some inline things that can span lines.\n          var li_accumulate = \"\";\n\n          // Loop over the lines in this block looking for tight lists.\n          tight_search:\n          for ( var line_no = 0; line_no < lines.length; line_no++ ) {\n            var nl = \"\",\n                l = lines[line_no].replace(/^\\n/, function(n) { nl = n; return \"\"; });\n\n            // TODO: really should cache this\n            var line_re = regex_for_depth( stack.length );\n\n            m = l.match( line_re );\n            //print( \"line:\", uneval(l), \"\\nline match:\", uneval(m) );\n\n            // We have a list item\n            if ( m[1] !== undefined ) {\n              // Process the previous list item, if any\n              if ( li_accumulate.length ) {\n                add( last_li, loose, this.processInline( li_accumulate ), nl );\n                // Loose mode will have been dealt with. Reset it\n                loose = false;\n                li_accumulate = \"\";\n              }\n\n              m[1] = expand_tab( m[1] );\n              var wanted_depth = Math.floor(m[1].length/4)+1;\n              //print( \"want:\", wanted_depth, \"stack:\", stack.length);\n              if ( wanted_depth > stack.length ) {\n                // Deep enough for a nested list outright\n                //print ( \"new nested list\" );\n                list = make_list( m );\n                last_li.push( list );\n                last_li = list[1] = [ \"listitem\" ];\n              }\n              else {\n                // We aren't deep enough to be strictly a new level. This is\n                // where Md.pl goes nuts. If the indent matches a level in the\n                // stack, put it there, else put it one deeper then the\n                // wanted_depth deserves.\n                var found = false;\n                for ( i = 0; i < stack.length; i++ ) {\n                  if ( stack[ i ].indent != m[1] ) continue;\n                  list = stack[ i ].list;\n                  stack.splice( i+1, stack.length - (i+1) );\n                  found = true;\n                  break;\n                }\n\n                if (!found) {\n                  //print(\"not found. l:\", uneval(l));\n                  wanted_depth++;\n                  if ( wanted_depth <= stack.length ) {\n                    stack.splice(wanted_depth, stack.length - wanted_depth);\n                    //print(\"Desired depth now\", wanted_depth, \"stack:\", stack.length);\n                    list = stack[wanted_depth-1].list;\n                    //print(\"list:\", uneval(list) );\n                  }\n                  else {\n                    //print (\"made new stack for messy indent\");\n                    list = make_list(m);\n                    last_li.push(list);\n                  }\n                }\n\n                //print( uneval(list), \"last\", list === stack[stack.length-1].list );\n                last_li = [ \"listitem\" ];\n                list.push(last_li);\n              } // end depth of shenegains\n              nl = \"\";\n            }\n\n            // Add content\n            if ( l.length > m[0].length ) {\n              li_accumulate += nl + l.substr( m[0].length );\n            }\n          } // tight_search\n\n          if ( li_accumulate.length ) {\n            add( last_li, loose, this.processInline( li_accumulate ), nl );\n            // Loose mode will have been dealt with. Reset it\n            loose = false;\n            li_accumulate = \"\";\n          }\n\n          // Look at the next block - we might have a loose list. Or an extra\n          // paragraph for the current li\n          var contained = get_contained_blocks( stack.length, next );\n\n          // Deal with code blocks or properly nested lists\n          if ( contained.length > 0 ) {\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            last_li.push.apply( last_li, this.toTree( contained, [] ) );\n          }\n\n          var next_block = next[0] && next[0].valueOf() || \"\";\n\n          if ( next_block.match(is_list_re) || next_block.match( /^ / ) ) {\n            block = next.shift();\n\n            // Check for an HR following a list: features/lists/hr_abutting\n            var hr = this.dialect.block.horizRule( block, next );\n\n            if ( hr ) {\n              ret.push.apply(ret, hr);\n              break;\n            }\n\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            loose = true;\n            continue loose_search;\n          }\n          break;\n        } // loose_search\n\n        return ret;\n      };\n    })(),\n\n    blockquote: function blockquote( block, next ) {\n      if ( !block.match( /^>/m ) )\n        return undefined;\n\n      var jsonml = [];\n\n      // separate out the leading abutting block, if any. I.e. in this case:\n      //\n      //  a\n      //  > b\n      //\n      if ( block[ 0 ] != \">\" ) {\n        var lines = block.split( /\\n/ ),\n            prev = [],\n            line_no = block.lineNumber;\n\n        // keep shifting lines until you find a crotchet\n        while ( lines.length && lines[ 0 ][ 0 ] != \">\" ) {\n            prev.push( lines.shift() );\n            line_no++;\n        }\n\n        var abutting = mk_block( prev.join( \"\\n\" ), \"\\n\", block.lineNumber );\n        jsonml.push.apply( jsonml, this.processBlock( abutting, [] ) );\n        // reassemble new block of just block quotes!\n        block = mk_block( lines.join( \"\\n\" ), block.trailing, line_no );\n      }\n\n\n      // if the next block is also a blockquote merge it in\n      while ( next.length && next[ 0 ][ 0 ] == \">\" ) {\n        var b = next.shift();\n        block = mk_block( block + block.trailing + b, b.trailing, block.lineNumber );\n      }\n\n      // Strip off the leading \"> \" and re-process as a block.\n      var input = block.replace( /^> ?/gm, \"\" ),\n          old_tree = this.tree,\n          processedBlock = this.toTree( input, [ \"blockquote\" ] ),\n          attr = extract_attr( processedBlock );\n\n      // If any link references were found get rid of them\n      if ( attr && attr.references ) {\n        delete attr.references;\n        // And then remove the attribute object if it's empty\n        if ( isEmpty( attr ) ) {\n          processedBlock.splice( 1, 1 );\n        }\n      }\n\n      jsonml.push( processedBlock );\n      return jsonml;\n    },\n\n    referenceDefn: function referenceDefn( block, next) {\n      var re = /^\\s*\\[(.*?)\\]:\\s*(\\S+)(?:\\s+(?:(['\"])(.*?)\\3|\\((.*?)\\)))?\\n?/;\n      // interesting matches are [ , ref_id, url, , title, title ]\n\n      if ( !block.match(re) )\n        return undefined;\n\n      // make an attribute node if it doesn't exist\n      if ( !extract_attr( this.tree ) ) {\n        this.tree.splice( 1, 0, {} );\n      }\n\n      var attrs = extract_attr( this.tree );\n\n      // make a references hash if it doesn't exist\n      if ( attrs.references === undefined ) {\n        attrs.references = {};\n      }\n\n      var b = this.loop_re_over_block(re, block, function( m ) {\n\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        var ref = attrs.references[ m[1].toLowerCase() ] = {\n          href: m[2]\n        };\n\n        if ( m[4] !== undefined )\n          ref.title = m[4];\n        else if ( m[5] !== undefined )\n          ref.title = m[5];\n\n      } );\n\n      if ( b.length )\n        next.unshift( mk_block( b, block.trailing ) );\n\n      return [];\n    },\n\n    para: function para( block, next ) {\n      // everything's a para!\n      return [ [\"para\"].concat( this.processInline( block ) ) ];\n    }\n  }\n};\n\nMarkdown.dialects.Gruber.inline = {\n\n    __oneElement__: function oneElement( text, patterns_or_re, previous_nodes ) {\n      var m,\n          res,\n          lastIndex = 0;\n\n      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;\n      var re = new RegExp( \"([\\\\s\\\\S]*?)(\" + (patterns_or_re.source || patterns_or_re) + \")\" );\n\n      m = re.exec( text );\n      if (!m) {\n        // Just boring text\n        return [ text.length, text ];\n      }\n      else if ( m[1] ) {\n        // Some un-interesting text matched. Return that first\n        return [ m[1].length, m[1] ];\n      }\n\n      var res;\n      if ( m[2] in this.dialect.inline ) {\n        res = this.dialect.inline[ m[2] ].call(\n                  this,\n                  text.substr( m.index ), m, previous_nodes || [] );\n      }\n      // Default for now to make dev easier. just slurp special and output it.\n      res = res || [ m[2].length, m[2] ];\n      return res;\n    },\n\n    __call__: function inline( text, patterns ) {\n\n      var out = [],\n          res;\n\n      function add(x) {\n        //D:self.debug(\"  adding output\", uneval(x));\n        if ( typeof x == \"string\" && typeof out[out.length-1] == \"string\" )\n          out[ out.length-1 ] += x;\n        else\n          out.push(x);\n      }\n\n      while ( text.length > 0 ) {\n        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out );\n        text = text.substr( res.shift() );\n        forEach(res, add )\n      }\n\n      return out;\n    },\n\n    // These characters are intersting elsewhere, so have rules for them so that\n    // chunks of plain text blocks don't include them\n    \"]\": function () {},\n    \"}\": function () {},\n\n    __escape__ : /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-]/,\n\n    \"\\\\\": function escaped( text ) {\n      // [ length of input processed, node/children to add... ]\n      // Only esacape: \\ ` * _ { } [ ] ( ) # * + - . !\n      if ( this.dialect.inline.__escape__.exec( text ) )\n        return [ 2, text.charAt( 1 ) ];\n      else\n        // Not an esacpe\n        return [ 1, \"\\\\\" ];\n    },\n\n    \"![\": function image( text ) {\n\n      // Unlike images, alt text is plain text only. no other elements are\n      // allowed in there\n\n      // ![Alt text](/path/to/img.jpg \"Optional title\")\n      //      1          2            3       4         <--- captures\n      var m = text.match( /^!\\[(.*?)\\][ \\t]*\\([ \\t]*([^\")]*?)(?:[ \\t]+([\"'])(.*?)\\3)?[ \\t]*\\)/ );\n\n      if ( m ) {\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        m[2] = this.dialect.inline.__call__.call( this, m[2], /\\\\/ )[0];\n\n        var attrs = { alt: m[1], href: m[2] || \"\" };\n        if ( m[4] !== undefined)\n          attrs.title = m[4];\n\n        return [ m[0].length, [ \"img\", attrs ] ];\n      }\n\n      // ![Alt text][id]\n      m = text.match( /^!\\[(.*?)\\][ \\t]*\\[(.*?)\\]/ );\n\n      if ( m ) {\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion\n        return [ m[0].length, [ \"img_ref\", { alt: m[1], ref: m[2].toLowerCase(), original: m[0] } ] ];\n      }\n\n      // Just consume the '!['\n      return [ 2, \"![\" ];\n    },\n\n    \"[\": function link( text ) {\n\n      var orig = String(text);\n      // Inline content is possible inside `link text`\n      var res = Markdown.DialectHelpers.inline_until_char.call( this, text.substr(1), \"]\" );\n\n      // No closing ']' found. Just consume the [\n      if ( !res ) return [ 1, \"[\" ];\n\n      var consumed = 1 + res[ 0 ],\n          children = res[ 1 ],\n          link,\n          attrs;\n\n      // At this point the first [...] has been parsed. See what follows to find\n      // out which kind of link we are (reference or direct url)\n      text = text.substr( consumed );\n\n      // [link text](/path/to/img.jpg \"Optional title\")\n      //                 1            2       3         <--- captures\n      // This will capture up to the last paren in the block. We then pull\n      // back based on if there a matching ones in the url\n      //    ([here](/url/(test))\n      // The parens have to be balanced\n      var m = text.match( /^\\s*\\([ \\t]*([^\"']*)(?:[ \\t]+([\"'])(.*?)\\2)?[ \\t]*\\)/ );\n      if ( m ) {\n        var url = m[1];\n        consumed += m[0].length;\n\n        if ( url && url[0] == \"<\" && url[url.length-1] == \">\" )\n          url = url.substring( 1, url.length - 1 );\n\n        // If there is a title we don't have to worry about parens in the url\n        if ( !m[3] ) {\n          var open_parens = 1; // One open that isn't in the capture\n          for ( var len = 0; len < url.length; len++ ) {\n            switch ( url[len] ) {\n            case \"(\":\n              open_parens++;\n              break;\n            case \")\":\n              if ( --open_parens == 0) {\n                consumed -= url.length - len;\n                url = url.substring(0, len);\n              }\n              break;\n            }\n          }\n        }\n\n        // Process escapes only\n        url = this.dialect.inline.__call__.call( this, url, /\\\\/ )[0];\n\n        attrs = { href: url || \"\" };\n        if ( m[3] !== undefined)\n          attrs.title = m[3];\n\n        link = [ \"link\", attrs ].concat( children );\n        return [ consumed, link ];\n      }\n\n      // [Alt text][id]\n      // [Alt text] [id]\n      m = text.match( /^\\s*\\[(.*?)\\]/ );\n\n      if ( m ) {\n\n        consumed += m[ 0 ].length;\n\n        // [links][] uses links as its reference\n        attrs = { ref: ( m[ 1 ] || String(children) ).toLowerCase(),  original: orig.substr( 0, consumed ) };\n\n        link = [ \"link_ref\", attrs ].concat( children );\n\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion.\n        // Store the original so that conversion can revert if the ref isn't found.\n        return [ consumed, link ];\n      }\n\n      // [id]\n      // Only if id is plain (no formatting.)\n      if ( children.length == 1 && typeof children[0] == \"string\" ) {\n\n        attrs = { ref: children[0].toLowerCase(),  original: orig.substr( 0, consumed ) };\n        link = [ \"link_ref\", attrs, children[0] ];\n        return [ consumed, link ];\n      }\n\n      // Just consume the \"[\"\n      return [ 1, \"[\" ];\n    },\n\n\n    \"<\": function autoLink( text ) {\n      var m;\n\n      if ( ( m = text.match( /^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>/ ) ) != null ) {\n        if ( m[3] ) {\n          return [ m[0].length, [ \"link\", { href: \"mailto:\" + m[3] }, m[3] ] ];\n\n        }\n        else if ( m[2] == \"mailto\" ) {\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1].substr(\"mailto:\".length ) ] ];\n        }\n        else\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1] ] ];\n      }\n\n      return [ 1, \"<\" ];\n    },\n\n    \"`\": function inlineCode( text ) {\n      // Inline code block. as many backticks as you like to start it\n      // Always skip over the opening ticks.\n      var m = text.match( /(`+)(([\\s\\S]*?)\\1)/ );\n\n      if ( m && m[2] )\n        return [ m[1].length + m[2].length, [ \"inlinecode\", m[3] ] ];\n      else {\n        // TODO: No matching end code found - warn!\n        return [ 1, \"`\" ];\n      }\n    },\n\n    \"  \\n\": function lineBreak( text ) {\n      return [ 3, [ \"linebreak\" ] ];\n    }\n\n};\n\n// Meta Helper/generator method for em and strong handling\nfunction strong_em( tag, md ) {\n\n  var state_slot = tag + \"_state\",\n      other_slot = tag == \"strong\" ? \"em_state\" : \"strong_state\";\n\n  function CloseTag(len) {\n    this.len_after = len;\n    this.name = \"close_\" + md;\n  }\n\n  return function ( text, orig_match ) {\n\n    if ( this[state_slot][0] == md ) {\n      // Most recent em is of this type\n      //D:this.debug(\"closing\", md);\n      this[state_slot].shift();\n\n      // \"Consume\" everything to go back to the recrusion in the else-block below\n      return[ text.length, new CloseTag(text.length-md.length) ];\n    }\n    else {\n      // Store a clone of the em/strong states\n      var other = this[other_slot].slice(),\n          state = this[state_slot].slice();\n\n      this[state_slot].unshift(md);\n\n      //D:this.debug_indent += \"  \";\n\n      // Recurse\n      var res = this.processInline( text.substr( md.length ) );\n      //D:this.debug_indent = this.debug_indent.substr(2);\n\n      var last = res[res.length - 1];\n\n      //D:this.debug(\"processInline from\", tag + \": \", uneval( res ) );\n\n      var check = this[state_slot].shift();\n      if ( last instanceof CloseTag ) {\n        res.pop();\n        // We matched! Huzzah.\n        var consumed = text.length - last.len_after;\n        return [ consumed, [ tag ].concat(res) ];\n      }\n      else {\n        // Restore the state of the other kind. We might have mistakenly closed it.\n        this[other_slot] = other;\n        this[state_slot] = state;\n\n        // We can't reuse the processed result as it could have wrong parsing contexts in it.\n        return [ md.length, md ];\n      }\n    }\n  }; // End returned function\n}\n\nMarkdown.dialects.Gruber.inline[\"**\"] = strong_em(\"strong\", \"**\");\nMarkdown.dialects.Gruber.inline[\"__\"] = strong_em(\"strong\", \"__\");\nMarkdown.dialects.Gruber.inline[\"*\"]  = strong_em(\"em\", \"*\");\nMarkdown.dialects.Gruber.inline[\"_\"]  = strong_em(\"em\", \"_\");\n\n\n// Build default order from insertion order.\nMarkdown.buildBlockOrder = function(d) {\n  var ord = [];\n  for ( var i in d ) {\n    if ( i == \"__order__\" || i == \"__call__\" ) continue;\n    ord.push( i );\n  }\n  d.__order__ = ord;\n};\n\n// Build patterns for inline matcher\nMarkdown.buildInlinePatterns = function(d) {\n  var patterns = [];\n\n  for ( var i in d ) {\n    // __foo__ is reserved and not a pattern\n    if ( i.match( /^__.*__$/) ) continue;\n    var l = i.replace( /([\\\\.*+?|()\\[\\]{}])/g, \"\\\\$1\" )\n             .replace( /\\n/, \"\\\\n\" );\n    patterns.push( i.length == 1 ? l : \"(?:\" + l + \")\" );\n  }\n\n  patterns = patterns.join(\"|\");\n  d.__patterns__ = patterns;\n  //print(\"patterns:\", uneval( patterns ) );\n\n  var fn = d.__call__;\n  d.__call__ = function(text, pattern) {\n    if ( pattern != undefined ) {\n      return fn.call(this, text, pattern);\n    }\n    else\n    {\n      return fn.call(this, text, patterns);\n    }\n  };\n};\n\nMarkdown.DialectHelpers = {};\nMarkdown.DialectHelpers.inline_until_char = function( text, want ) {\n  var consumed = 0,\n      nodes = [];\n\n  while ( true ) {\n    if ( text.charAt( consumed ) == want ) {\n      // Found the character we were looking for\n      consumed++;\n      return [ consumed, nodes ];\n    }\n\n    if ( consumed >= text.length ) {\n      // No closing char found. Abort.\n      return null;\n    }\n\n    var res = this.dialect.inline.__oneElement__.call(this, text.substr( consumed ) );\n    consumed += res[ 0 ];\n    // Add any returned nodes.\n    nodes.push.apply( nodes, res.slice( 1 ) );\n  }\n}\n\n// Helper function to make sub-classing a dialect easier\nMarkdown.subclassDialect = function( d ) {\n  function Block() {}\n  Block.prototype = d.block;\n  function Inline() {}\n  Inline.prototype = d.inline;\n\n  return { block: new Block(), inline: new Inline() };\n};\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Gruber.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Gruber.inline );\n\nMarkdown.dialects.Maruku = Markdown.subclassDialect( Markdown.dialects.Gruber );\n\nMarkdown.dialects.Maruku.processMetaHash = function processMetaHash( meta_string ) {\n  var meta = split_meta_hash( meta_string ),\n      attr = {};\n\n  for ( var i = 0; i < meta.length; ++i ) {\n    // id: #foo\n    if ( /^#/.test( meta[ i ] ) ) {\n      attr.id = meta[ i ].substring( 1 );\n    }\n    // class: .foo\n    else if ( /^\\./.test( meta[ i ] ) ) {\n      // if class already exists, append the new one\n      if ( attr[\"class\"] ) {\n        attr[\"class\"] = attr[\"class\"] + meta[ i ].replace( /./, \" \" );\n      }\n      else {\n        attr[\"class\"] = meta[ i ].substring( 1 );\n      }\n    }\n    // attribute: foo=bar\n    else if ( /\\=/.test( meta[ i ] ) ) {\n      var s = meta[ i ].split( /\\=/ );\n      attr[ s[ 0 ] ] = s[ 1 ];\n    }\n  }\n\n  return attr;\n}\n\nfunction split_meta_hash( meta_string ) {\n  var meta = meta_string.split( \"\" ),\n      parts = [ \"\" ],\n      in_quotes = false;\n\n  while ( meta.length ) {\n    var letter = meta.shift();\n    switch ( letter ) {\n      case \" \" :\n        // if we're in a quoted section, keep it\n        if ( in_quotes ) {\n          parts[ parts.length - 1 ] += letter;\n        }\n        // otherwise make a new part\n        else {\n          parts.push( \"\" );\n        }\n        break;\n      case \"'\" :\n      case '\"' :\n        // reverse the quotes and move straight on\n        in_quotes = !in_quotes;\n        break;\n      case \"\\\\\" :\n        // shift off the next letter to be used straight away.\n        // it was escaped so we'll keep it whatever it is\n        letter = meta.shift();\n      default :\n        parts[ parts.length - 1 ] += letter;\n        break;\n    }\n  }\n\n  return parts;\n}\n\nMarkdown.dialects.Maruku.block.document_meta = function document_meta( block, next ) {\n  // we're only interested in the first block\n  if ( block.lineNumber > 1 ) return undefined;\n\n  // document_meta blocks consist of one or more lines of `Key: Value\\n`\n  if ( ! block.match( /^(?:\\w+:.*\\n)*\\w+:.*$/ ) ) return undefined;\n\n  // make an attribute node if it doesn't exist\n  if ( !extract_attr( this.tree ) ) {\n    this.tree.splice( 1, 0, {} );\n  }\n\n  var pairs = block.split( /\\n/ );\n  for ( p in pairs ) {\n    var m = pairs[ p ].match( /(\\w+):\\s*(.*)$/ ),\n        key = m[ 1 ].toLowerCase(),\n        value = m[ 2 ];\n\n    this.tree[ 1 ][ key ] = value;\n  }\n\n  // document_meta produces no content!\n  return [];\n};\n\nMarkdown.dialects.Maruku.block.block_meta = function block_meta( block, next ) {\n  // check if the last line of the block is an meta hash\n  var m = block.match( /(^|\\n) {0,3}\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}$/ );\n  if ( !m ) return undefined;\n\n  // process the meta hash\n  var attr = this.dialect.processMetaHash( m[ 2 ] );\n\n  var hash;\n\n  // if we matched ^ then we need to apply meta to the previous block\n  if ( m[ 1 ] === \"\" ) {\n    var node = this.tree[ this.tree.length - 1 ];\n    hash = extract_attr( node );\n\n    // if the node is a string (rather than JsonML), bail\n    if ( typeof node === \"string\" ) return undefined;\n\n    // create the attribute hash if it doesn't exist\n    if ( !hash ) {\n      hash = {};\n      node.splice( 1, 0, hash );\n    }\n\n    // add the attributes in\n    for ( a in attr ) {\n      hash[ a ] = attr[ a ];\n    }\n\n    // return nothing so the meta hash is removed\n    return [];\n  }\n\n  // pull the meta hash off the block and process what's left\n  var b = block.replace( /\\n.*$/, \"\" ),\n      result = this.processBlock( b, [] );\n\n  // get or make the attributes hash\n  hash = extract_attr( result[ 0 ] );\n  if ( !hash ) {\n    hash = {};\n    result[ 0 ].splice( 1, 0, hash );\n  }\n\n  // attach the attributes to the block\n  for ( a in attr ) {\n    hash[ a ] = attr[ a ];\n  }\n\n  return result;\n};\n\nMarkdown.dialects.Maruku.block.definition_list = function definition_list( block, next ) {\n  // one or more terms followed by one or more definitions, in a single block\n  var tight = /^((?:[^\\s:].*\\n)+):\\s+([\\s\\S]+)$/,\n      list = [ \"dl\" ],\n      i, m;\n\n  // see if we're dealing with a tight or loose block\n  if ( ( m = block.match( tight ) ) ) {\n    // pull subsequent tight DL blocks out of `next`\n    var blocks = [ block ];\n    while ( next.length && tight.exec( next[ 0 ] ) ) {\n      blocks.push( next.shift() );\n    }\n\n    for ( var b = 0; b < blocks.length; ++b ) {\n      var m = blocks[ b ].match( tight ),\n          terms = m[ 1 ].replace( /\\n$/, \"\" ).split( /\\n/ ),\n          defns = m[ 2 ].split( /\\n:\\s+/ );\n\n      // print( uneval( m ) );\n\n      for ( i = 0; i < terms.length; ++i ) {\n        list.push( [ \"dt\", terms[ i ] ] );\n      }\n\n      for ( i = 0; i < defns.length; ++i ) {\n        // run inline processing over the definition\n        list.push( [ \"dd\" ].concat( this.processInline( defns[ i ].replace( /(\\n)\\s+/, \"$1\" ) ) ) );\n      }\n    }\n  }\n  else {\n    return undefined;\n  }\n\n  return [ list ];\n};\n\n// splits on unescaped instances of @ch. If @ch is not a character the result\n// can be unpredictable\n\nMarkdown.dialects.Maruku.block.table = function table (block, next) {\n\n    var _split_on_unescaped = function(s, ch) {\n        ch = ch || '\\\\s';\n        if (ch.match(/^[\\\\|\\[\\]{}?*.+^$]$/)) { ch = '\\\\' + ch; }\n        var res = [ ],\n            r = new RegExp('^((?:\\\\\\\\.|[^\\\\\\\\' + ch + '])*)' + ch + '(.*)'),\n            m;\n        while(m = s.match(r)) {\n            res.push(m[1]);\n            s = m[2];\n        }\n        res.push(s);\n        return res;\n    }\n\n    var leading_pipe = /^ {0,3}\\|(.+)\\n {0,3}\\|\\s*([\\-:]+[\\-| :]*)\\n((?:\\s*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        // find at least an unescaped pipe in each line\n        no_leading_pipe = /^ {0,3}(\\S(?:\\\\.|[^\\\\|])*\\|.*)\\n {0,3}([\\-:]+\\s*\\|[\\-| :]*)\\n((?:(?:\\\\.|[^\\\\|])*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        i, m;\n    if (m = block.match(leading_pipe)) {\n        // remove leading pipes in contents\n        // (header and horizontal rule already have the leading pipe left out)\n        m[3] = m[3].replace(/^\\s*\\|/gm, '');\n    } else if (! ( m = block.match(no_leading_pipe))) {\n        return undefined;\n    }\n\n    var table = [ \"table\", [ \"thead\", [ \"tr\" ] ], [ \"tbody\" ] ];\n\n    // remove trailing pipes, then split on pipes\n    // (no escaped pipes are allowed in horizontal rule)\n    m[2] = m[2].replace(/\\|\\s*$/, '').split('|');\n\n    // process alignment\n    var html_attrs = [ ];\n    forEach (m[2], function (s) {\n        if (s.match(/^\\s*-+:\\s*$/))       html_attrs.push({align: \"right\"});\n        else if (s.match(/^\\s*:-+\\s*$/))  html_attrs.push({align: \"left\"});\n        else if (s.match(/^\\s*:-+:\\s*$/)) html_attrs.push({align: \"center\"});\n        else                              html_attrs.push({});\n    });\n\n    // now for the header, avoid escaped pipes\n    m[1] = _split_on_unescaped(m[1].replace(/\\|\\s*$/, ''), '|');\n    for (i = 0; i < m[1].length; i++) {\n        table[1][1].push(['th', html_attrs[i] || {}].concat(\n            this.processInline(m[1][i].trim())));\n    }\n\n    // now for body contents\n    forEach (m[3].replace(/\\|\\s*$/mg, '').split('\\n'), function (row) {\n        var html_row = ['tr'];\n        row = _split_on_unescaped(row, '|');\n        for (i = 0; i < row.length; i++) {\n            html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));\n        }\n        table[2].push(html_row);\n    }, this);\n\n    return [table];\n}\n\nMarkdown.dialects.Maruku.inline[ \"{:\" ] = function inline_meta( text, matches, out ) {\n  if ( !out.length ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // get the preceeding element\n  var before = out[ out.length - 1 ];\n\n  if ( typeof before === \"string\" ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // match a meta hash\n  var m = text.match( /^\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}/ );\n\n  // no match, false alarm\n  if ( !m ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // attach the attributes to the preceeding element\n  var meta = this.dialect.processMetaHash( m[ 1 ] ),\n      attr = extract_attr( before );\n\n  if ( !attr ) {\n    attr = {};\n    before.splice( 1, 0, attr );\n  }\n\n  for ( var k in meta ) {\n    attr[ k ] = meta[ k ];\n  }\n\n  // cut out the string and replace it with nothing\n  return [ m[ 0 ].length, \"\" ];\n};\n\nMarkdown.dialects.Maruku.inline.__escape__ = /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-|:]/;\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Maruku.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Maruku.inline );\n\nvar isArray = Array.isArray || function(obj) {\n  return Object.prototype.toString.call(obj) == \"[object Array]\";\n};\n\nvar forEach;\n// Don't mess with Array.prototype. Its not friendly\nif ( Array.prototype.forEach ) {\n  forEach = function( arr, cb, thisp ) {\n    return arr.forEach( cb, thisp );\n  };\n}\nelse {\n  forEach = function(arr, cb, thisp) {\n    for (var i = 0; i < arr.length; i++) {\n      cb.call(thisp || arr, arr[i], i, arr);\n    }\n  }\n}\n\nvar isEmpty = function( obj ) {\n  for ( var key in obj ) {\n    if ( hasOwnProperty.call( obj, key ) ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction extract_attr( jsonml ) {\n  return isArray(jsonml)\n      && jsonml.length > 1\n      && typeof jsonml[ 1 ] === \"object\"\n      && !( isArray(jsonml[ 1 ]) )\n      ? jsonml[ 1 ]\n      : undefined;\n}\n\n\n\n/**\n *  renderJsonML( jsonml[, options] ) -> String\n *  - jsonml (Array): JsonML array to render to XML\n *  - options (Object): options\n *\n *  Converts the given JsonML into well-formed XML.\n *\n *  The options currently understood are:\n *\n *  - root (Boolean): wether or not the root node should be included in the\n *    output, or just its children. The default `false` is to not include the\n *    root itself.\n */\nexpose.renderJsonML = function( jsonml, options ) {\n  options = options || {};\n  // include the root element in the rendered output?\n  options.root = options.root || false;\n\n  var content = [];\n\n  if ( options.root ) {\n    content.push( render_tree( jsonml ) );\n  }\n  else {\n    jsonml.shift(); // get rid of the tag\n    if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n      jsonml.shift(); // get rid of the attributes\n    }\n\n    while ( jsonml.length ) {\n      content.push( render_tree( jsonml.shift() ) );\n    }\n  }\n\n  return content.join( \"\\n\\n\" );\n};\n\nfunction escapeHTML( text ) {\n  return text.replace( /&/g, \"&amp;\" )\n             .replace( /</g, \"&lt;\" )\n             .replace( />/g, \"&gt;\" )\n             .replace( /\"/g, \"&quot;\" )\n             .replace( /'/g, \"&#39;\" );\n}\n\nfunction render_tree( jsonml ) {\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return escapeHTML( jsonml );\n  }\n\n  var tag = jsonml.shift(),\n      attributes = {},\n      content = [];\n\n  if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n    attributes = jsonml.shift();\n  }\n\n  while ( jsonml.length ) {\n    content.push( render_tree( jsonml.shift() ) );\n  }\n\n  var tag_attrs = \"\";\n  for ( var a in attributes ) {\n    tag_attrs += \" \" + a + '=\"' + escapeHTML( attributes[ a ] ) + '\"';\n  }\n\n  // be careful about adding whitespace here for inline elements\n  if ( tag == \"img\" || tag == \"br\" || tag == \"hr\" ) {\n    return \"<\"+ tag + tag_attrs + \"/>\";\n  }\n  else {\n    return \"<\"+ tag + tag_attrs + \">\" + content.join( \"\" ) + \"</\" + tag + \">\";\n  }\n}\n\nfunction convert_tree_to_html( tree, references, options ) {\n  var i;\n  options = options || {};\n\n  // shallow clone\n  var jsonml = tree.slice( 0 );\n\n  if ( typeof options.preprocessTreeNode === \"function\" ) {\n      jsonml = options.preprocessTreeNode(jsonml, references);\n  }\n\n  // Clone attributes if they exist\n  var attrs = extract_attr( jsonml );\n  if ( attrs ) {\n    jsonml[ 1 ] = {};\n    for ( i in attrs ) {\n      jsonml[ 1 ][ i ] = attrs[ i ];\n    }\n    attrs = jsonml[ 1 ];\n  }\n\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return jsonml;\n  }\n\n  // convert this node\n  switch ( jsonml[ 0 ] ) {\n    case \"header\":\n      jsonml[ 0 ] = \"h\" + jsonml[ 1 ].level;\n      delete jsonml[ 1 ].level;\n      break;\n    case \"bulletlist\":\n      jsonml[ 0 ] = \"ul\";\n      break;\n    case \"numberlist\":\n      jsonml[ 0 ] = \"ol\";\n      break;\n    case \"listitem\":\n      jsonml[ 0 ] = \"li\";\n      break;\n    case \"para\":\n      jsonml[ 0 ] = \"p\";\n      break;\n    case \"markdown\":\n      jsonml[ 0 ] = \"html\";\n      if ( attrs ) delete attrs.references;\n      break;\n    case \"code_block\":\n      jsonml[ 0 ] = \"pre\";\n      i = attrs ? 2 : 1;\n      var code = [ \"code\" ];\n      code.push.apply( code, jsonml.splice( i, jsonml.length - i ) );\n      jsonml[ i ] = code;\n      break;\n    case \"inlinecode\":\n      jsonml[ 0 ] = \"code\";\n      break;\n    case \"img\":\n      jsonml[ 1 ].src = jsonml[ 1 ].href;\n      delete jsonml[ 1 ].href;\n      break;\n    case \"linebreak\":\n      jsonml[ 0 ] = \"br\";\n    break;\n    case \"link\":\n      jsonml[ 0 ] = \"a\";\n      break;\n    case \"link_ref\":\n      jsonml[ 0 ] = \"a\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.href = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n    case \"img_ref\":\n      jsonml[ 0 ] = \"img\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.src = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n  }\n\n  // convert all the children\n  i = 1;\n\n  // deal with the attribute node, if it exists\n  if ( attrs ) {\n    // if there are keys, skip over it\n    for ( var key in jsonml[ 1 ] ) {\n        i = 2;\n        break;\n    }\n    // if there aren't, remove it\n    if ( i === 1 ) {\n      jsonml.splice( i, 1 );\n    }\n  }\n\n  for ( ; i < jsonml.length; ++i ) {\n    jsonml[ i ] = convert_tree_to_html( jsonml[ i ], references, options );\n  }\n\n  return jsonml;\n}\n\n\n// merges adjacent text nodes into a single node\nfunction merge_text_nodes( jsonml ) {\n  // skip the tag name and attribute hash\n  var i = extract_attr( jsonml ) ? 2 : 1;\n\n  while ( i < jsonml.length ) {\n    // if it's a string check the next item too\n    if ( typeof jsonml[ i ] === \"string\" ) {\n      if ( i + 1 < jsonml.length && typeof jsonml[ i + 1 ] === \"string\" ) {\n        // merge the second string into the first and remove it\n        jsonml[ i ] += jsonml.splice( i + 1, 1 )[ 0 ];\n      }\n      else {\n        ++i;\n      }\n    }\n    // if it's not a string recurse\n    else {\n      merge_text_nodes( jsonml[ i ] );\n      ++i;\n    }\n  }\n}\n\n} )( (function() {\n  if ( typeof exports === \"undefined\" ) {\n    window.markdown = {};\n    return window.markdown;\n  }\n  else {\n    return exports;\n  }\n} )() );\n"],"sourceRoot":""}